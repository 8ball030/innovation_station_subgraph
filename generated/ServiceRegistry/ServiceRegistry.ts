// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ActivateRegistration extends ethereum.Event {
  get params(): ActivateRegistration__Params {
    return new ActivateRegistration__Params(this);
  }
}

export class ActivateRegistration__Params {
  _event: ActivateRegistration;

  constructor(event: ActivateRegistration) {
    this._event = event;
  }

  get serviceId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BaseURIChanged extends ethereum.Event {
  get params(): BaseURIChanged__Params {
    return new BaseURIChanged__Params(this);
  }
}

export class BaseURIChanged__Params {
  _event: BaseURIChanged;

  constructor(event: BaseURIChanged) {
    this._event = event;
  }

  get baseURI(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class CreateMultisigWithAgents extends ethereum.Event {
  get params(): CreateMultisigWithAgents__Params {
    return new CreateMultisigWithAgents__Params(this);
  }
}

export class CreateMultisigWithAgents__Params {
  _event: CreateMultisigWithAgents;

  constructor(event: CreateMultisigWithAgents) {
    this._event = event;
  }

  get serviceId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get multisig(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CreateService extends ethereum.Event {
  get params(): CreateService__Params {
    return new CreateService__Params(this);
  }
}

export class CreateService__Params {
  _event: CreateService;

  constructor(event: CreateService) {
    this._event = event;
  }

  get serviceId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DeployService extends ethereum.Event {
  get params(): DeployService__Params {
    return new DeployService__Params(this);
  }
}

export class DeployService__Params {
  _event: DeployService;

  constructor(event: DeployService) {
    this._event = event;
  }

  get serviceId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Drain extends ethereum.Event {
  get params(): Drain__Params {
    return new Drain__Params(this);
  }
}

export class Drain__Params {
  _event: Drain;

  constructor(event: Drain) {
    this._event = event;
  }

  get drainer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DrainerUpdated extends ethereum.Event {
  get params(): DrainerUpdated__Params {
    return new DrainerUpdated__Params(this);
  }
}

export class DrainerUpdated__Params {
  _event: DrainerUpdated;

  constructor(event: DrainerUpdated) {
    this._event = event;
  }

  get drainer(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ManagerUpdated extends ethereum.Event {
  get params(): ManagerUpdated__Params {
    return new ManagerUpdated__Params(this);
  }
}

export class ManagerUpdated__Params {
  _event: ManagerUpdated;

  constructor(event: ManagerUpdated) {
    this._event = event;
  }

  get manager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OperatorSlashed extends ethereum.Event {
  get params(): OperatorSlashed__Params {
    return new OperatorSlashed__Params(this);
  }
}

export class OperatorSlashed__Params {
  _event: OperatorSlashed;

  constructor(event: OperatorSlashed) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get serviceId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OperatorUnbond extends ethereum.Event {
  get params(): OperatorUnbond__Params {
    return new OperatorUnbond__Params(this);
  }
}

export class OperatorUnbond__Params {
  _event: OperatorUnbond;

  constructor(event: OperatorUnbond) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get serviceId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnerUpdated extends ethereum.Event {
  get params(): OwnerUpdated__Params {
    return new OwnerUpdated__Params(this);
  }
}

export class OwnerUpdated__Params {
  _event: OwnerUpdated;

  constructor(event: OwnerUpdated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Refund extends ethereum.Event {
  get params(): Refund__Params {
    return new Refund__Params(this);
  }
}

export class Refund__Params {
  _event: Refund;

  constructor(event: Refund) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RegisterInstance extends ethereum.Event {
  get params(): RegisterInstance__Params {
    return new RegisterInstance__Params(this);
  }
}

export class RegisterInstance__Params {
  _event: RegisterInstance;

  constructor(event: RegisterInstance) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get serviceId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get agentInstance(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get agentId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TerminateService extends ethereum.Event {
  get params(): TerminateService__Params {
    return new TerminateService__Params(this);
  }
}

export class TerminateService__Params {
  _event: TerminateService;

  constructor(event: TerminateService) {
    this._event = event;
  }

  get serviceId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateService extends ethereum.Event {
  get params(): UpdateService__Params {
    return new UpdateService__Params(this);
  }
}

export class UpdateService__Params {
  _event: UpdateService;

  constructor(event: UpdateService) {
    this._event = event;
  }

  get serviceId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get configHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class ServiceRegistry__createInputAgentParamsStruct extends ethereum.Tuple {
  get slots(): BigInt {
    return this[0].toBigInt();
  }

  get bond(): BigInt {
    return this[1].toBigInt();
  }
}

export class ServiceRegistry__getAgentInstancesResult {
  value0: BigInt;
  value1: Array<Address>;

  constructor(value0: BigInt, value1: Array<Address>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddressArray(this.value1));
    return map;
  }

  getNumAgentInstances(): BigInt {
    return this.value0;
  }

  getAgentInstances(): Array<Address> {
    return this.value1;
  }
}

export class ServiceRegistry__getAgentParamsResultAgentParamsStruct extends ethereum.Tuple {
  get slots(): BigInt {
    return this[0].toBigInt();
  }

  get bond(): BigInt {
    return this[1].toBigInt();
  }
}

export class ServiceRegistry__getAgentParamsResult {
  value0: BigInt;
  value1: Array<ServiceRegistry__getAgentParamsResultAgentParamsStruct>;

  constructor(
    value0: BigInt,
    value1: Array<ServiceRegistry__getAgentParamsResultAgentParamsStruct>
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromTupleArray(this.value1));
    return map;
  }

  getNumAgentIds(): BigInt {
    return this.value0;
  }

  getAgentParams(): Array<
    ServiceRegistry__getAgentParamsResultAgentParamsStruct
  > {
    return this.value1;
  }
}

export class ServiceRegistry__getInstancesForAgentIdResult {
  value0: BigInt;
  value1: Array<Address>;

  constructor(value0: BigInt, value1: Array<Address>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddressArray(this.value1));
    return map;
  }

  getNumAgentInstances(): BigInt {
    return this.value0;
  }

  getAgentInstances(): Array<Address> {
    return this.value1;
  }
}

export class ServiceRegistry__getPreviousHashesResult {
  value0: BigInt;
  value1: Array<Bytes>;

  constructor(value0: BigInt, value1: Array<Bytes>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytesArray(this.value1));
    return map;
  }

  getNumHashes(): BigInt {
    return this.value0;
  }

  getConfigHashes(): Array<Bytes> {
    return this.value1;
  }
}

export class ServiceRegistry__getServiceResultServiceStruct extends ethereum.Tuple {
  get securityDeposit(): BigInt {
    return this[0].toBigInt();
  }

  get multisig(): Address {
    return this[1].toAddress();
  }

  get configHash(): Bytes {
    return this[2].toBytes();
  }

  get threshold(): BigInt {
    return this[3].toBigInt();
  }

  get maxNumAgentInstances(): BigInt {
    return this[4].toBigInt();
  }

  get numAgentInstances(): BigInt {
    return this[5].toBigInt();
  }

  get state(): i32 {
    return this[6].toI32();
  }

  get agentIds(): Array<BigInt> {
    return this[7].toBigIntArray();
  }
}

export class ServiceRegistry__getUnitIdsOfServiceResult {
  value0: BigInt;
  value1: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getNumUnitIds(): BigInt {
    return this.value0;
  }

  getUnitIds(): Array<BigInt> {
    return this.value1;
  }
}

export class ServiceRegistry__mapOperatorAndServiceIdAgentInstancesResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getInstance(): Address {
    return this.value0;
  }

  getAgentId(): BigInt {
    return this.value1;
  }
}

export class ServiceRegistry__mapServiceAndAgentIdAgentParamsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getSlots(): BigInt {
    return this.value0;
  }

  getBond(): BigInt {
    return this.value1;
  }
}

export class ServiceRegistry__mapServicesResult {
  value0: BigInt;
  value1: Address;
  value2: Bytes;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: i32;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Bytes,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    return map;
  }

  getSecurityDeposit(): BigInt {
    return this.value0;
  }

  getMultisig(): Address {
    return this.value1;
  }

  getConfigHash(): Bytes {
    return this.value2;
  }

  getThreshold(): BigInt {
    return this.value3;
  }

  getMaxNumAgentInstances(): BigInt {
    return this.value4;
  }

  getNumAgentInstances(): BigInt {
    return this.value5;
  }

  getState(): i32 {
    return this.value6;
  }
}

export class ServiceRegistry__terminateResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getSuccess(): boolean {
    return this.value0;
  }

  getRefund(): BigInt {
    return this.value1;
  }
}

export class ServiceRegistry__unbondResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getSuccess(): boolean {
    return this.value0;
  }

  getRefund(): BigInt {
    return this.value1;
  }
}

export class ServiceRegistry__updateInputAgentParamsStruct extends ethereum.Tuple {
  get slots(): BigInt {
    return this[0].toBigInt();
  }

  get bond(): BigInt {
    return this[1].toBigInt();
  }
}

export class ServiceRegistry extends ethereum.SmartContract {
  static bind(address: Address): ServiceRegistry {
    return new ServiceRegistry("ServiceRegistry", address);
  }

  CID_PREFIX(): string {
    let result = super.call("CID_PREFIX", "CID_PREFIX():(string)", []);

    return result[0].toString();
  }

  try_CID_PREFIX(): ethereum.CallResult<string> {
    let result = super.tryCall("CID_PREFIX", "CID_PREFIX():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  VERSION(): string {
    let result = super.call("VERSION", "VERSION():(string)", []);

    return result[0].toString();
  }

  try_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("VERSION", "VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  agentRegistry(): Address {
    let result = super.call("agentRegistry", "agentRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_agentRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "agentRegistry",
      "agentRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  changeMultisigPermission(multisig: Address, permission: boolean): boolean {
    let result = super.call(
      "changeMultisigPermission",
      "changeMultisigPermission(address,bool):(bool)",
      [
        ethereum.Value.fromAddress(multisig),
        ethereum.Value.fromBoolean(permission)
      ]
    );

    return result[0].toBoolean();
  }

  try_changeMultisigPermission(
    multisig: Address,
    permission: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "changeMultisigPermission",
      "changeMultisigPermission(address,bool):(bool)",
      [
        ethereum.Value.fromAddress(multisig),
        ethereum.Value.fromBoolean(permission)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  create(
    serviceOwner: Address,
    configHash: Bytes,
    agentIds: Array<BigInt>,
    agentParams: Array<ServiceRegistry__createInputAgentParamsStruct>,
    threshold: BigInt
  ): BigInt {
    let result = super.call(
      "create",
      "create(address,bytes32,uint32[],(uint32,uint96)[],uint32):(uint256)",
      [
        ethereum.Value.fromAddress(serviceOwner),
        ethereum.Value.fromFixedBytes(configHash),
        ethereum.Value.fromUnsignedBigIntArray(agentIds),
        ethereum.Value.fromTupleArray(agentParams),
        ethereum.Value.fromUnsignedBigInt(threshold)
      ]
    );

    return result[0].toBigInt();
  }

  try_create(
    serviceOwner: Address,
    configHash: Bytes,
    agentIds: Array<BigInt>,
    agentParams: Array<ServiceRegistry__createInputAgentParamsStruct>,
    threshold: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "create",
      "create(address,bytes32,uint32[],(uint32,uint96)[],uint32):(uint256)",
      [
        ethereum.Value.fromAddress(serviceOwner),
        ethereum.Value.fromFixedBytes(configHash),
        ethereum.Value.fromUnsignedBigIntArray(agentIds),
        ethereum.Value.fromTupleArray(agentParams),
        ethereum.Value.fromUnsignedBigInt(threshold)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deploy(
    serviceOwner: Address,
    serviceId: BigInt,
    multisigImplementation: Address,
    data: Bytes
  ): Address {
    let result = super.call(
      "deploy",
      "deploy(address,uint256,address,bytes):(address)",
      [
        ethereum.Value.fromAddress(serviceOwner),
        ethereum.Value.fromUnsignedBigInt(serviceId),
        ethereum.Value.fromAddress(multisigImplementation),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toAddress();
  }

  try_deploy(
    serviceOwner: Address,
    serviceId: BigInt,
    multisigImplementation: Address,
    data: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deploy",
      "deploy(address,uint256,address,bytes):(address)",
      [
        ethereum.Value.fromAddress(serviceOwner),
        ethereum.Value.fromUnsignedBigInt(serviceId),
        ethereum.Value.fromAddress(multisigImplementation),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  drain(): BigInt {
    let result = super.call("drain", "drain():(uint256)", []);

    return result[0].toBigInt();
  }

  try_drain(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("drain", "drain():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  drainer(): Address {
    let result = super.call("drainer", "drainer():(address)", []);

    return result[0].toAddress();
  }

  try_drainer(): ethereum.CallResult<Address> {
    let result = super.tryCall("drainer", "drainer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exists(unitId: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(unitId)
    ]);

    return result[0].toBoolean();
  }

  try_exists(unitId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(unitId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAgentInstances(
    serviceId: BigInt
  ): ServiceRegistry__getAgentInstancesResult {
    let result = super.call(
      "getAgentInstances",
      "getAgentInstances(uint256):(uint256,address[])",
      [ethereum.Value.fromUnsignedBigInt(serviceId)]
    );

    return new ServiceRegistry__getAgentInstancesResult(
      result[0].toBigInt(),
      result[1].toAddressArray()
    );
  }

  try_getAgentInstances(
    serviceId: BigInt
  ): ethereum.CallResult<ServiceRegistry__getAgentInstancesResult> {
    let result = super.tryCall(
      "getAgentInstances",
      "getAgentInstances(uint256):(uint256,address[])",
      [ethereum.Value.fromUnsignedBigInt(serviceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ServiceRegistry__getAgentInstancesResult(
        value[0].toBigInt(),
        value[1].toAddressArray()
      )
    );
  }

  getAgentParams(serviceId: BigInt): ServiceRegistry__getAgentParamsResult {
    let result = super.call(
      "getAgentParams",
      "getAgentParams(uint256):(uint256,(uint32,uint96)[])",
      [ethereum.Value.fromUnsignedBigInt(serviceId)]
    );

    return new ServiceRegistry__getAgentParamsResult(
      result[0].toBigInt(),
      result[1].toTupleArray<
        ServiceRegistry__getAgentParamsResultAgentParamsStruct
      >()
    );
  }

  try_getAgentParams(
    serviceId: BigInt
  ): ethereum.CallResult<ServiceRegistry__getAgentParamsResult> {
    let result = super.tryCall(
      "getAgentParams",
      "getAgentParams(uint256):(uint256,(uint32,uint96)[])",
      [ethereum.Value.fromUnsignedBigInt(serviceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ServiceRegistry__getAgentParamsResult(
        value[0].toBigInt(),
        value[1].toTupleArray<
          ServiceRegistry__getAgentParamsResultAgentParamsStruct
        >()
      )
    );
  }

  getApproved(param0: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getInstancesForAgentId(
    serviceId: BigInt,
    agentId: BigInt
  ): ServiceRegistry__getInstancesForAgentIdResult {
    let result = super.call(
      "getInstancesForAgentId",
      "getInstancesForAgentId(uint256,uint256):(uint256,address[])",
      [
        ethereum.Value.fromUnsignedBigInt(serviceId),
        ethereum.Value.fromUnsignedBigInt(agentId)
      ]
    );

    return new ServiceRegistry__getInstancesForAgentIdResult(
      result[0].toBigInt(),
      result[1].toAddressArray()
    );
  }

  try_getInstancesForAgentId(
    serviceId: BigInt,
    agentId: BigInt
  ): ethereum.CallResult<ServiceRegistry__getInstancesForAgentIdResult> {
    let result = super.tryCall(
      "getInstancesForAgentId",
      "getInstancesForAgentId(uint256,uint256):(uint256,address[])",
      [
        ethereum.Value.fromUnsignedBigInt(serviceId),
        ethereum.Value.fromUnsignedBigInt(agentId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ServiceRegistry__getInstancesForAgentIdResult(
        value[0].toBigInt(),
        value[1].toAddressArray()
      )
    );
  }

  getOperatorBalance(operator: Address, serviceId: BigInt): BigInt {
    let result = super.call(
      "getOperatorBalance",
      "getOperatorBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(serviceId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getOperatorBalance(
    operator: Address,
    serviceId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOperatorBalance",
      "getOperatorBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(serviceId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPreviousHashes(
    serviceId: BigInt
  ): ServiceRegistry__getPreviousHashesResult {
    let result = super.call(
      "getPreviousHashes",
      "getPreviousHashes(uint256):(uint256,bytes32[])",
      [ethereum.Value.fromUnsignedBigInt(serviceId)]
    );

    return new ServiceRegistry__getPreviousHashesResult(
      result[0].toBigInt(),
      result[1].toBytesArray()
    );
  }

  try_getPreviousHashes(
    serviceId: BigInt
  ): ethereum.CallResult<ServiceRegistry__getPreviousHashesResult> {
    let result = super.tryCall(
      "getPreviousHashes",
      "getPreviousHashes(uint256):(uint256,bytes32[])",
      [ethereum.Value.fromUnsignedBigInt(serviceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ServiceRegistry__getPreviousHashesResult(
        value[0].toBigInt(),
        value[1].toBytesArray()
      )
    );
  }

  getService(
    serviceId: BigInt
  ): ServiceRegistry__getServiceResultServiceStruct {
    let result = super.call(
      "getService",
      "getService(uint256):((uint96,address,bytes32,uint32,uint32,uint32,uint8,uint32[]))",
      [ethereum.Value.fromUnsignedBigInt(serviceId)]
    );

    return changetype<ServiceRegistry__getServiceResultServiceStruct>(
      result[0].toTuple()
    );
  }

  try_getService(
    serviceId: BigInt
  ): ethereum.CallResult<ServiceRegistry__getServiceResultServiceStruct> {
    let result = super.tryCall(
      "getService",
      "getService(uint256):((uint96,address,bytes32,uint32,uint32,uint32,uint8,uint32[]))",
      [ethereum.Value.fromUnsignedBigInt(serviceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ServiceRegistry__getServiceResultServiceStruct>(
        value[0].toTuple()
      )
    );
  }

  getUnitIdsOfService(
    unitType: i32,
    serviceId: BigInt
  ): ServiceRegistry__getUnitIdsOfServiceResult {
    let result = super.call(
      "getUnitIdsOfService",
      "getUnitIdsOfService(uint8,uint256):(uint256,uint32[])",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(unitType)),
        ethereum.Value.fromUnsignedBigInt(serviceId)
      ]
    );

    return new ServiceRegistry__getUnitIdsOfServiceResult(
      result[0].toBigInt(),
      result[1].toBigIntArray()
    );
  }

  try_getUnitIdsOfService(
    unitType: i32,
    serviceId: BigInt
  ): ethereum.CallResult<ServiceRegistry__getUnitIdsOfServiceResult> {
    let result = super.tryCall(
      "getUnitIdsOfService",
      "getUnitIdsOfService(uint8,uint256):(uint256,uint32[])",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(unitType)),
        ethereum.Value.fromUnsignedBigInt(serviceId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ServiceRegistry__getUnitIdsOfServiceResult(
        value[0].toBigInt(),
        value[1].toBigIntArray()
      )
    );
  }

  isApprovedForAll(param0: Address, param1: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mapAgentInstanceOperators(param0: Address): Address {
    let result = super.call(
      "mapAgentInstanceOperators",
      "mapAgentInstanceOperators(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_mapAgentInstanceOperators(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "mapAgentInstanceOperators",
      "mapAgentInstanceOperators(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mapConfigHashes(param0: BigInt, param1: BigInt): Bytes {
    let result = super.call(
      "mapConfigHashes",
      "mapConfigHashes(uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBytes();
  }

  try_mapConfigHashes(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "mapConfigHashes",
      "mapConfigHashes(uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  mapMultisigs(param0: Address): boolean {
    let result = super.call("mapMultisigs", "mapMultisigs(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_mapMultisigs(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("mapMultisigs", "mapMultisigs(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mapOperatorAndServiceIdAgentInstances(
    param0: BigInt,
    param1: BigInt
  ): ServiceRegistry__mapOperatorAndServiceIdAgentInstancesResult {
    let result = super.call(
      "mapOperatorAndServiceIdAgentInstances",
      "mapOperatorAndServiceIdAgentInstances(uint256,uint256):(address,uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new ServiceRegistry__mapOperatorAndServiceIdAgentInstancesResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_mapOperatorAndServiceIdAgentInstances(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<
    ServiceRegistry__mapOperatorAndServiceIdAgentInstancesResult
  > {
    let result = super.tryCall(
      "mapOperatorAndServiceIdAgentInstances",
      "mapOperatorAndServiceIdAgentInstances(uint256,uint256):(address,uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ServiceRegistry__mapOperatorAndServiceIdAgentInstancesResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  mapOperatorAndServiceIdOperatorBalances(param0: BigInt): BigInt {
    let result = super.call(
      "mapOperatorAndServiceIdOperatorBalances",
      "mapOperatorAndServiceIdOperatorBalances(uint256):(uint96)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_mapOperatorAndServiceIdOperatorBalances(
    param0: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mapOperatorAndServiceIdOperatorBalances",
      "mapOperatorAndServiceIdOperatorBalances(uint256):(uint96)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mapServiceAndAgentIdAgentInstances(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "mapServiceAndAgentIdAgentInstances",
      "mapServiceAndAgentIdAgentInstances(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_mapServiceAndAgentIdAgentInstances(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "mapServiceAndAgentIdAgentInstances",
      "mapServiceAndAgentIdAgentInstances(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mapServiceAndAgentIdAgentParams(
    param0: BigInt
  ): ServiceRegistry__mapServiceAndAgentIdAgentParamsResult {
    let result = super.call(
      "mapServiceAndAgentIdAgentParams",
      "mapServiceAndAgentIdAgentParams(uint256):(uint32,uint96)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ServiceRegistry__mapServiceAndAgentIdAgentParamsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_mapServiceAndAgentIdAgentParams(
    param0: BigInt
  ): ethereum.CallResult<
    ServiceRegistry__mapServiceAndAgentIdAgentParamsResult
  > {
    let result = super.tryCall(
      "mapServiceAndAgentIdAgentParams",
      "mapServiceAndAgentIdAgentParams(uint256):(uint32,uint96)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ServiceRegistry__mapServiceAndAgentIdAgentParamsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  mapServiceIdSetAgentIds(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "mapServiceIdSetAgentIds",
      "mapServiceIdSetAgentIds(uint256,uint256):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_mapServiceIdSetAgentIds(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mapServiceIdSetAgentIds",
      "mapServiceIdSetAgentIds(uint256,uint256):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mapServiceIdSetComponentIds(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "mapServiceIdSetComponentIds",
      "mapServiceIdSetComponentIds(uint256,uint256):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_mapServiceIdSetComponentIds(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mapServiceIdSetComponentIds",
      "mapServiceIdSetComponentIds(uint256,uint256):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mapServices(param0: BigInt): ServiceRegistry__mapServicesResult {
    let result = super.call(
      "mapServices",
      "mapServices(uint256):(uint96,address,bytes32,uint32,uint32,uint32,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ServiceRegistry__mapServicesResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBytes(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toI32()
    );
  }

  try_mapServices(
    param0: BigInt
  ): ethereum.CallResult<ServiceRegistry__mapServicesResult> {
    let result = super.tryCall(
      "mapServices",
      "mapServices(uint256):(uint96,address,bytes32,uint32,uint32,uint32,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ServiceRegistry__mapServicesResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBytes(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toI32()
      )
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(id: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  slash(
    agentInstances: Array<Address>,
    amounts: Array<BigInt>,
    serviceId: BigInt
  ): boolean {
    let result = super.call(
      "slash",
      "slash(address[],uint96[],uint256):(bool)",
      [
        ethereum.Value.fromAddressArray(agentInstances),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromUnsignedBigInt(serviceId)
      ]
    );

    return result[0].toBoolean();
  }

  try_slash(
    agentInstances: Array<Address>,
    amounts: Array<BigInt>,
    serviceId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "slash",
      "slash(address[],uint96[],uint256):(bool)",
      [
        ethereum.Value.fromAddressArray(agentInstances),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromUnsignedBigInt(serviceId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  slashedFunds(): BigInt {
    let result = super.call("slashedFunds", "slashedFunds():(uint96)", []);

    return result[0].toBigInt();
  }

  try_slashedFunds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("slashedFunds", "slashedFunds():(uint96)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  terminate(
    serviceOwner: Address,
    serviceId: BigInt
  ): ServiceRegistry__terminateResult {
    let result = super.call(
      "terminate",
      "terminate(address,uint256):(bool,uint256)",
      [
        ethereum.Value.fromAddress(serviceOwner),
        ethereum.Value.fromUnsignedBigInt(serviceId)
      ]
    );

    return new ServiceRegistry__terminateResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_terminate(
    serviceOwner: Address,
    serviceId: BigInt
  ): ethereum.CallResult<ServiceRegistry__terminateResult> {
    let result = super.tryCall(
      "terminate",
      "terminate(address,uint256):(bool,uint256)",
      [
        ethereum.Value.fromAddress(serviceOwner),
        ethereum.Value.fromUnsignedBigInt(serviceId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ServiceRegistry__terminateResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  tokenByIndex(id: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(unitId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(unitId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(unitId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(unitId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unbond(operator: Address, serviceId: BigInt): ServiceRegistry__unbondResult {
    let result = super.call(
      "unbond",
      "unbond(address,uint256):(bool,uint256)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(serviceId)
      ]
    );

    return new ServiceRegistry__unbondResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_unbond(
    operator: Address,
    serviceId: BigInt
  ): ethereum.CallResult<ServiceRegistry__unbondResult> {
    let result = super.tryCall(
      "unbond",
      "unbond(address,uint256):(bool,uint256)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(serviceId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ServiceRegistry__unbondResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  update(
    serviceOwner: Address,
    configHash: Bytes,
    agentIds: Array<BigInt>,
    agentParams: Array<ServiceRegistry__updateInputAgentParamsStruct>,
    threshold: BigInt,
    serviceId: BigInt
  ): boolean {
    let result = super.call(
      "update",
      "update(address,bytes32,uint32[],(uint32,uint96)[],uint32,uint256):(bool)",
      [
        ethereum.Value.fromAddress(serviceOwner),
        ethereum.Value.fromFixedBytes(configHash),
        ethereum.Value.fromUnsignedBigIntArray(agentIds),
        ethereum.Value.fromTupleArray(agentParams),
        ethereum.Value.fromUnsignedBigInt(threshold),
        ethereum.Value.fromUnsignedBigInt(serviceId)
      ]
    );

    return result[0].toBoolean();
  }

  try_update(
    serviceOwner: Address,
    configHash: Bytes,
    agentIds: Array<BigInt>,
    agentParams: Array<ServiceRegistry__updateInputAgentParamsStruct>,
    threshold: BigInt,
    serviceId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "update",
      "update(address,bytes32,uint32[],(uint32,uint96)[],uint32,uint256):(bool)",
      [
        ethereum.Value.fromAddress(serviceOwner),
        ethereum.Value.fromFixedBytes(configHash),
        ethereum.Value.fromUnsignedBigIntArray(agentIds),
        ethereum.Value.fromTupleArray(agentParams),
        ethereum.Value.fromUnsignedBigInt(threshold),
        ethereum.Value.fromUnsignedBigInt(serviceId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _baseURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _agentRegistry(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ActivateRegistrationCall extends ethereum.Call {
  get inputs(): ActivateRegistrationCall__Inputs {
    return new ActivateRegistrationCall__Inputs(this);
  }

  get outputs(): ActivateRegistrationCall__Outputs {
    return new ActivateRegistrationCall__Outputs(this);
  }
}

export class ActivateRegistrationCall__Inputs {
  _call: ActivateRegistrationCall;

  constructor(call: ActivateRegistrationCall) {
    this._call = call;
  }

  get serviceOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get serviceId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ActivateRegistrationCall__Outputs {
  _call: ActivateRegistrationCall;

  constructor(call: ActivateRegistrationCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ChangeDrainerCall extends ethereum.Call {
  get inputs(): ChangeDrainerCall__Inputs {
    return new ChangeDrainerCall__Inputs(this);
  }

  get outputs(): ChangeDrainerCall__Outputs {
    return new ChangeDrainerCall__Outputs(this);
  }
}

export class ChangeDrainerCall__Inputs {
  _call: ChangeDrainerCall;

  constructor(call: ChangeDrainerCall) {
    this._call = call;
  }

  get newDrainer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeDrainerCall__Outputs {
  _call: ChangeDrainerCall;

  constructor(call: ChangeDrainerCall) {
    this._call = call;
  }
}

export class ChangeManagerCall extends ethereum.Call {
  get inputs(): ChangeManagerCall__Inputs {
    return new ChangeManagerCall__Inputs(this);
  }

  get outputs(): ChangeManagerCall__Outputs {
    return new ChangeManagerCall__Outputs(this);
  }
}

export class ChangeManagerCall__Inputs {
  _call: ChangeManagerCall;

  constructor(call: ChangeManagerCall) {
    this._call = call;
  }

  get newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeManagerCall__Outputs {
  _call: ChangeManagerCall;

  constructor(call: ChangeManagerCall) {
    this._call = call;
  }
}

export class ChangeMultisigPermissionCall extends ethereum.Call {
  get inputs(): ChangeMultisigPermissionCall__Inputs {
    return new ChangeMultisigPermissionCall__Inputs(this);
  }

  get outputs(): ChangeMultisigPermissionCall__Outputs {
    return new ChangeMultisigPermissionCall__Outputs(this);
  }
}

export class ChangeMultisigPermissionCall__Inputs {
  _call: ChangeMultisigPermissionCall;

  constructor(call: ChangeMultisigPermissionCall) {
    this._call = call;
  }

  get multisig(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get permission(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ChangeMultisigPermissionCall__Outputs {
  _call: ChangeMultisigPermissionCall;

  constructor(call: ChangeMultisigPermissionCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ChangeOwnerCall extends ethereum.Call {
  get inputs(): ChangeOwnerCall__Inputs {
    return new ChangeOwnerCall__Inputs(this);
  }

  get outputs(): ChangeOwnerCall__Outputs {
    return new ChangeOwnerCall__Outputs(this);
  }
}

export class ChangeOwnerCall__Inputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeOwnerCall__Outputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get serviceOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get configHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get agentIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get agentParams(): Array<CreateCallAgentParamsStruct> {
    return this._call.inputValues[3].value.toTupleArray<
      CreateCallAgentParamsStruct
    >();
  }

  get threshold(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get serviceId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateCallAgentParamsStruct extends ethereum.Tuple {
  get slots(): BigInt {
    return this[0].toBigInt();
  }

  get bond(): BigInt {
    return this[1].toBigInt();
  }
}

export class DeployCall extends ethereum.Call {
  get inputs(): DeployCall__Inputs {
    return new DeployCall__Inputs(this);
  }

  get outputs(): DeployCall__Outputs {
    return new DeployCall__Outputs(this);
  }
}

export class DeployCall__Inputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get serviceOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get serviceId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get multisigImplementation(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class DeployCall__Outputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get multisig(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DrainCall extends ethereum.Call {
  get inputs(): DrainCall__Inputs {
    return new DrainCall__Inputs(this);
  }

  get outputs(): DrainCall__Outputs {
    return new DrainCall__Outputs(this);
  }
}

export class DrainCall__Inputs {
  _call: DrainCall;

  constructor(call: DrainCall) {
    this._call = call;
  }
}

export class DrainCall__Outputs {
  _call: DrainCall;

  constructor(call: DrainCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RegisterAgentsCall extends ethereum.Call {
  get inputs(): RegisterAgentsCall__Inputs {
    return new RegisterAgentsCall__Inputs(this);
  }

  get outputs(): RegisterAgentsCall__Outputs {
    return new RegisterAgentsCall__Outputs(this);
  }
}

export class RegisterAgentsCall__Inputs {
  _call: RegisterAgentsCall;

  constructor(call: RegisterAgentsCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get serviceId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get agentInstances(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get agentIds(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class RegisterAgentsCall__Outputs {
  _call: RegisterAgentsCall;

  constructor(call: RegisterAgentsCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get bURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SlashCall extends ethereum.Call {
  get inputs(): SlashCall__Inputs {
    return new SlashCall__Inputs(this);
  }

  get outputs(): SlashCall__Outputs {
    return new SlashCall__Outputs(this);
  }
}

export class SlashCall__Inputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }

  get agentInstances(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get serviceId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SlashCall__Outputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TerminateCall extends ethereum.Call {
  get inputs(): TerminateCall__Inputs {
    return new TerminateCall__Inputs(this);
  }

  get outputs(): TerminateCall__Outputs {
    return new TerminateCall__Outputs(this);
  }
}

export class TerminateCall__Inputs {
  _call: TerminateCall;

  constructor(call: TerminateCall) {
    this._call = call;
  }

  get serviceOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get serviceId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TerminateCall__Outputs {
  _call: TerminateCall;

  constructor(call: TerminateCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get refund(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UnbondCall extends ethereum.Call {
  get inputs(): UnbondCall__Inputs {
    return new UnbondCall__Inputs(this);
  }

  get outputs(): UnbondCall__Outputs {
    return new UnbondCall__Outputs(this);
  }
}

export class UnbondCall__Inputs {
  _call: UnbondCall;

  constructor(call: UnbondCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get serviceId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnbondCall__Outputs {
  _call: UnbondCall;

  constructor(call: UnbondCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get refund(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class UpdateCall extends ethereum.Call {
  get inputs(): UpdateCall__Inputs {
    return new UpdateCall__Inputs(this);
  }

  get outputs(): UpdateCall__Outputs {
    return new UpdateCall__Outputs(this);
  }
}

export class UpdateCall__Inputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }

  get serviceOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get configHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get agentIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get agentParams(): Array<UpdateCallAgentParamsStruct> {
    return this._call.inputValues[3].value.toTupleArray<
      UpdateCallAgentParamsStruct
    >();
  }

  get threshold(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get serviceId(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class UpdateCall__Outputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateCallAgentParamsStruct extends ethereum.Tuple {
  get slots(): BigInt {
    return this[0].toBigInt();
  }

  get bond(): BigInt {
    return this[1].toBigInt();
  }
}
